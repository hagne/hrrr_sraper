#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 11 17:10:44 2020

@author: hagen
"""

from hrrr_scraper import hrrr_lab
import traceback
import sys
import pandas as pd
import time
import datetime
import atmPy.data_archives.noaa_gml
from atmPy.general import measurement_site as ms
import psutil
import numpy as np

version = '2.0.0'

### helper

def monitor_processes(name = 'scrape_hrrr', duration = 300, verbose = False):
    process_name = name
    mon_p = [p for p in psutil.process_iter() if p.name() == process_name]
    # pid = [p.pid for p in mon_p]

    mon_proc = pd.DataFrame()

    i = 0
    start = datetime.datetime.now()
    while 1:
        now = pd.to_datetime(datetime.datetime.now())
        dt = now-start
        if dt.seconds > duration:
            break
        data = {}
        for e,p in enumerate(mon_p):
            data[f'mem{e}'] = p.memory_percent()
            data[f'cpu{e}'] = p.cpu_percent()
        data
        newrow = pd.DataFrame(data, index = [now])
        mon_proc = mon_proc.append(newrow)
        if verbose:
            if i == 0:
                print(',\t'.join([f'{col}' for col in newrow.columns]))
            if np.mod(i,300) == 0:
                print(',\t'.join([f'{i:0.2f}' for i in newrow.values[0]]))

        time.sleep(1)
        i+=1
    return mon_proc

### execute the program
messages = ['run started {}\n========='.format(pd.Timestamp(datetime.datetime.now()))]
messages.append(f'scrape_hrrr_conus_nat version {version}')
errors = []
abort = False
try:
    running_processes = [p for p in psutil.process_iter() if p.name() == "scrape_hrrr"]
    no_of_processes_running = len(running_processes)
    print(f'number of hrrr_scrape processes running: {no_of_processes_running}')
    mem = psutil.virtual_memory()
    no_of_cpu = round((100 - mem.percent - 30)/20)
    print(f'numper of cpus: {no_of_cpu}')
    messages.append(f'numper of cpus: {no_of_cpu}')
    if no_of_cpu < 1:
        messages.append('aborted since insufficient memory')
        no_of_files_generated = 0
        no_of_files_generated_bdl = 0
        abort = True
        print('aborted,insufficient memoryg')
    elif no_of_processes_running > 1:
        
        messages.append('aborted since processess still running')
        for p in running_processes:
            txt = f'status: {p.status()}'
            messages.append(txt)
            print(txt)
            
        mon_proc = monitor_processes()
        messages.append(mon_proc.mean().__str__())
        
        
        no_of_files_generated = 0
        no_of_files_generated_bdl = 0
        abort = True
        print('aborted, process still running')
    else:
        gml_sites = atmPy.data_archives.noaa_gml.get_all_sites()
        # extra from Betsy
        gml_sites.add_station(ms.Station(abbreviation= 'GBN',name = 'Great Basin NP', state='NV', lat=39.005147, lon= -114.215994, alt = 2061))
        gml_sites.add_station(ms.Station(abbreviation= 'AUS',name = 'Austin', state = 'NV', lat= 39.503006, lon= -117.081512, alt =  1915))
        gml_sites.add_station(ms.Station(abbreviation= 'WMS',name = 'White Mtn Summit', state = 'CA', lat=37.634093, lon=-118.255688, alt=4343))
        gml_sites.add_station(ms.Station(abbreviation= 'BCO',name = 'Barcroft Obs', state = 'CA', lat=37.58925, lon=-118.238703, alt=3889))
        
        # out = scrapelab.scrape_hrrr_conus(gml_sites, no_of_cpu= no_of_cpu, error_when_not_enough_mem=False, 
        #                                   # test = 2
        #                                   )
        
        pp =   hrrr_lab.ProjectorProject(gml_sites, 
                                         path2raw = '/mnt/telg/tmp/hrrr_tmp/',
                                         path2projected_individual = '/mnt/telg/tmp/hrrr_tmp_inter/',
                                         path2projected_final = '/mnt/telg/projects/smoke_at_gml_sites/data/wrfnat/',
                                         ftp_server = 'ftp.ncep.noaa.gov',
                                         ftp_path2files = '/pub/data/nccf/com/hrrr/prod',
                                         max_forcast_interval= 18
                                         )
        no_of_files_generated = pp.workplan.shape[0]
        print(f'number of files to process: {no_of_files_generated}')
        out = pp.process(no_of_cpu=no_of_cpu)
        
        
        # out_bdl = scrapelab.concat2daily_files()
        workplan_bdl = out['concat'].workplan
        no_of_files_generated_bdl = workplan_bdl.shape[0]
        # for idx,row in workplan.iterrow():
    #     messages.append(f'{row.path2tempfile} -> {row.path2file}')
except:
    error, error_txt, trace = sys.exc_info()
    tm = ['{}: {}'.format(error.__name__, error_txt.args[0])] + traceback.format_tb(trace)
    txt = '\n'.join(tm)
    print(txt)
    messages.append(txt)
    errors.append(txt)
    no_of_files_generated = 0
    no_of_files_generated_bdl = 0
    
messages.append('============\nrun finished {}\n\n'.format(pd.Timestamp(datetime.datetime.now())))

### generate log text
message_txt = '\n'.join(messages)

if len(errors) !=0:
    error_txt = '\n\n======================\nERRORS\n=======================\n'
    error_txt += '\n=======================================\n=========================================='.join(errors)
    message_txt += error_txt

### save log
# with open(log_p, 'a') as log:
#     log.write(message_txt)

### send email with results
try:
    import smtplib

    # Import the email modules we'll need
    from email.mime.text import MIMEText

    # Open a plain text file for reading.  For this example, assume that
    # the text file contains only ASCII characters.
    # with open(textfile) as fp:
    #     # Create a text/plain message
    msg = MIMEText(message_txt)

    # me == the sender's email address
    # you == the recipient's email address
    address  = 'hagen.telg@noaa.gov'
    if abort:
        passed = 'Aborted'
    elif len(errors) == 0:
        passed = f'Clean ({no_of_files_generated}/{no_of_files_generated_bdl} files)'
    else:
        passed = 'Errors ({})'.format(len(errors))
    msg['Subject'] = 'scrape_hrrr_smoke run - {} - {}'.format(passed, pd.Timestamp(datetime.datetime.now()))
    msg['From'] = address
    msg['To'] = address

    # Send the message via our own SMTP server.
    s = smtplib.SMTP('localhost')
    s.send_message(msg)
    s.quit()
except:
    print('sending email failed')