#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 28 15:13:24 2022

@author: hagen

dependences:
    pygrib
    xarray
    scipy
    netcdf4
    pyxlsb
"""
import argparse
import pathlib as pl
import pandas as pd
import ast

import importlib.resources as pkg_resources
import configparser
try:
    import hrrr_scraper.hrrr_lab as hrrr_lab
except ModuleNotFoundError:
    # add the base path of hrrr_sraper to the path variable 
    import sys
    p2script = pl.Path(__file__).resolve()
    p2base = p2script.parent.parent.as_posix()
    sys.path.append(p2base)
    import hrrr_scraper.hrrr_lab as hrrr_lab
    # import .



# if args.verbose:
#     verbose = True
# else:
#     verbose = False

# if args.param:
#     external_params = False
# else:
#     external_params = True

#### TODO decide on the default values! Alos in argparser below. e.g. overwrite? verbose? error_when....
def main(path2grib = None, path2outfld = None, config = None, verbose = True, dry = False, first = False, param = False, overwrite = False, error_when_workplan_empty = True):    
    # print(config)
    #### Config
    if isinstance(config, list):
        if verbose:
            print('from config')
        assert(isinstance(path2grib, type(None)))
        assert(isinstance(path2outfld, type(None)))
        
        config_in = configparser.ConfigParser(allow_no_value=True,)
        if len(config)>0:
            p2conf = pl.Path(config[0])
            assert(p2conf.is_file()), 'Config file does not exist'
            with open(p2conf, 'r') as rein:
                config_in.read_string(rein.read())
            if verbose:
                print('read config.')
        else:
            with pkg_resources.open_text('hrrr_scraper.extra', 'example.ini') as rein:
                config_in.read_string(rein.read())
            if verbose:
                print("No config file specified. Use example.ini from package's extra folder.")
                
        p2f = config_in['file_io']['path2input'].split('#')[0].strip() 
        path2outfld = config_in['file_io']['path2output'].split('#')[0].strip() 
        file_type = config_in['file_io']['input_file_type'].split('#')[0].strip()   
        nameformat = config_in['file_io']['outputnameformat']
        
        #### TODO: add site collections
        sitelist = []
        for sk in config_in['locations'].keys():
            site = ast.literal_eval(f"{{{config_in['locations']['TBL']}}}")
            site['abb'] = sk
            sitelist.append(site)
            
        if verbose:
            print('sites to be considered:')
            for site in sitelist:
                print('\t', end = '')
                print(site)
        
            
        #### variables to extract
        variables2extract = [v.split('#')[0].strip() for v in config_in['variables'].keys()]
        if verbose:
            print('variables to be extracted: ', end = '')
            print(variables2extract)
    #### not config
    else:
        p2f = path2grib
        file_type = 'HRRRv4_2d'
        nameformat='test_{ct.year:04d}{ct.month:02d}{ct.day:02d}_{ct.hour:02d}_{ft:02d}.nc'
                
        sitelist = [{'name': 'test', 'abb': 'tst', 'lat': 40.12498, 'lon': -105.2368}, {'name': 'test2', 'abb': 'tsz', 'lat': 41.12498, 'lon': -115.2368}]
        variables2extract = 'all'

    
    #### file precheck
    p2f = pl.Path(p2f)
    if p2f.is_dir():
        p2f = p2f.resolve()
        if verbose:
            print(f'Processing all files in folder: "{p2f}"')
        p2f = p2f.glob('*.grib*')
    else:
        assert(p2f.is_file()), f'input file "{p2f}" does not exist'
        if verbose:
            print(f'Processing single file: {p2f}')
        p2f = [p2f,] 

    p2fo = pl.Path(path2outfld)
    assert(p2fo.resolve().parent.is_dir()), 'Folder of output file path does not exist.'
    
    # return p2f, p2fo
    
    
    #### create workplan
    workplan = pd.DataFrame(p2f, columns = ['path2grib',])  
    
    ## open files real quick to get basic infos
    workplan['basics'] = workplan.apply(lambda row: hrrr_lab.open_grib_file(row.path2grib.as_posix(), grab_basics=True), axis = 1)
    
    workplan['ft'] = workplan.apply(lambda row: row.basics['forecastTime'], axis = 1)
    workplan['ct'] = workplan.apply(lambda row: row.basics['cycledatetime'], axis = 1)
    
    workplan.drop('basics', axis=1, inplace=True)
        
    # create the output paths
    workplan['path2fout'] = workplan.apply(lambda row: p2fo.joinpath((nameformat.format(ct =row.ct, ft = row.ft))), axis = 1)
    
    # remove from workplan when output path is file
    if not overwrite:
        workplan = workplan[~workplan.apply(lambda row: row.path2fout.is_file(), axis = 1)]
    
    if first:
        workplan = workplan.iloc[[0]]
    
    if verbose:
        print('The workplan:')
        print(workplan)
        
    if error_when_workplan_empty:
        assert(workplan.shape[0] != 0), 'No files to process'
    # return workplan

    for idx,row in workplan.iterrows():
        if verbose:
            print(f'processing file: {row.path2grib}')
        if dry:
            continue
        
        #### read grib file
        # print(p2f)
        #### TODO: external params file should be picked automatically ... grib file has no key that clearly states what the file is.
        if file_type == 'HRRRv4_2d':
            vp = False
            external_params = {'file_type': file_type, 'variables': variables2extract}
        else:
            assert(False), 'programming required'
        
        if param:
            external_params = False
        hrrinst = hrrr_lab.open_grib_file(row.path2grib.as_posix(), external_params=external_params)
        
        #### projection onto site
        hrrr_proj = hrrinst.project2sites(sitelist, vp = vp)
        
        #### save result
        hrrr_proj.save(row.path2fout,
                       # nameformat = nameformat, 
                       verbose=verbose)
    return 1

#### if _name_....            
if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i','--input', help='Path to grib file or folder containing the grib files. If its a folder all files will be parsed.')
    parser.add_argument('-o','--output', help='Path to file results are written to (netcdf).')
    parser.add_argument('-c','--config', help='Path to config file. If set -i and -o will be ignored.',  nargs='*')
    parser.add_argument('-f', '--first', help='testing: will merely process the first file.',  action='store_true')
    # parser.add_argument('-d', '--list_files', help='testing: lists all files that will/would be processed.',  action='store_true')
    parser.add_argument('-d', '--dry', help='testing: will stop before execution.',  action='store_true')
    parser.add_argument('-v', '--verbose', help='More info during execution',  action='store_true')
    parser.add_argument('-p', '--param', help='testing: Use the internal parameter dictionary instead of the xls sheet.',  action='store_true')
    # parser.add_argument('-w', '--workplan', help='Will return the workplan without processing enything',  action='store_true')
    
    args = parser.parse_args()

    main(path2grib = args.input,
         path2outfld = args.output, 
         config = args.config, 
         verbose = args.verbose, 
         dry = args.dry,
         first = args.first, 
         param = args.param)          